Jenkins
It is a build tool.


ci : continous integration : continous build + continous test 
old code with new code
before ci we have time waste and every thing is manual work.
after ci everything is automated.

cd : continous delivery	  : deployment manually to prod env
cd : continous deployment : deployment automatically to prod env

PIPELINE:
STEP BY STEP EXECUTION OF A PARTICULAR PROCESS.
SERIES OF EVENTS INTERLINKED WITH EACHOTHER.

CODE -- > BUILD -- > TEST -- >  DEPLOY

ENV:
DEV	: DEVELOPERS
QA	: TESTERS
UAT	: CLIENT

THE ABOVE ENVS ARE CALLED AS PRE-PROD OR NON-PROD

PROD	: USER
PROD ENV IS ALSO CALLED AS LIVE ENV

Day 2:-

Jenkins port number - 8080
ssh port number -22
http port number - 80
https - 443
mysql -3306
rdp - 3389

To lunch instance for Jenkins

* Go to aws console and login
* Go to search box type ec2 and select.
* launch instance 
 step 1 - select amazon-linux 2 hvm (ami)
 step 2 - select instance type t2.micro
 step 3 - create new key pair in .pem
 step 4 - create new security group  
           go to edit and provide ssh and all traffic
 step 5 - launch instance.
* Go to instance select connect and go through ssh client-->copy example
Go to browser - jenkins.io - click on download
* Download Jenkins 2.479.2 LTS for: redhat/centos/fedora
   select that

amazon-linux -- yum
Ubuntu     --- apt
redhat      --- rpm

JENKINS: PORT - 8080

SETUP:
STEP-1: GETTING REP0 (jenkins.io -- > downloads -- > Redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

STEP-2: INSTALLING JAVA 11
amazon-linux-extras install java-openjdk11 -y

STEP-3: INSTALLING GIT JENKINS MAVEN 
yum install git maven jenkins -y

STEP-4: STARTING THE SERVICE (any service will be on stopped state when its installed)
systemctl start jenkins
systemctl status jenkins

#STEP-1: INSTALLING GIT JAVA-1.8.0 MAVEN 
yum install git java-1.8.0-openjdk maven -y

#STEP-2: GETTING THE REPO (jenkins.io --> download -- > redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

#STEP-3: DOWNLOAD JAVA11 AND JENKINS
sudo yum install java-17-amazon-corretto -y
yum install jenkins -y
update-alternatives --config java

#STEP-4: RESTARTING JENKINS (when we download service it will on stopped state)
systemctl start jenkins.service
systemctl status jenkins.service

try this installation its workig
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
amazon-linux-extras install java-openjdk11 -y
yum install git maven jenkins -y
systemctl start jenkins
systemctl status jenkins


STEP-5: CONNECTING TO JENKINS
Public-ip:8080 -- > browser

 vim jenkins.sh
    3  sh jenkins.sh
    4  clear
    5  cat /var/lib/jenkins/secrets/initialAdminPassword
    6  cd /var/lib/jenkins/workspace/swiggy
    7  ll
    8  cat pom.xml
    9  ll
   10  cat Jenkinsfile
   11  ll
   12  git clone https://github.com/nit8ambatch/netflix-webapp-code.git
   13  ll
   14  cd netflix-webapp-code/
   15  ll
   16  cd ..
   17  ll
   18  clear
   19  cat /etc/passwd
   20  df -h
   21  free -h
   22  ll
   23  rm -rf mani nani sony aws
   24  ll

jenkins setup in ubuntu:-

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \ https://pkg.jenkins.io/debian-stable binary/ | sudo tee \/etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get upgrade -y
sudo apt-get install fontconfig openjdk-17-jre -y
sudo apt-get install jenkins -y
systemctl start jenkins
systemctl status jenkins


To install jenkins setup in ubununt install below given commands

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \ https://pkg.jenkins.io/debian-stable binary/ | sudo tee \/etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get upgrade -y
sudo apt-get install fontconfig openjdk-17-jre -y
sudo apt-get install jenkins -y
systemctl start jenkins
systemctl status jenkins

============================================================================================================

To install jenkins setup in amazon-linux below given commnds

sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
amazon-linux-extras install java-openjdk11 -y
yum install git maven jenkins -y
systemctl start jenkins
systemctl status jenkins

###########################################################################################################

vim jenkins.sh
insert mode 
:wq

if we run manually in fre style project
''''
#!/bin/bash

# Get total and used memory
TOTAL_MEM=$(free -m | awk '/^Mem:/{print $2}')
USED_MEM=$(free -m | awk '/^Mem:/{print $3}')
FREE_MEM=$(free -m | awk '/^Mem:/{print $4}')
THRESHOLD=20  # Set threshold for alert (in percentage)

# Calculate memory usage percentage
MEM_USAGE=$(( 100 * USED_MEM / TOTAL_MEM ))

# Display memory usage
echo "Total Memory: ${TOTAL_MEM} MB"
echo "Used Memory: ${USED_MEM} MB"
echo "Free Memory: ${FREE_MEM} MB"
echo "Memory Usage: ${MEM_USAGE}%"

# Check if memory usage exceeds the threshold
if [ "$MEM_USAGE" -ge "$THRESHOLD" ]; then
    echo "WARNING: Memory usage is above ${THRESHOLD}%!"
fi
''''''

pipeline {
    agent any
    
    stages {
        stage ("stage-1") {
            steps {
                sh 'touch file1 file2'
                sh 'pwd'
                sh 'mkdir d1'
            }
        }
    }
}

passs
pipeline agent any stages stage and steps

pipeline {
    agent any
   
    stages{
        stage ('build'){
            steps {
                sh '''
                #!/bin/bash

                # Get total and used memory
                TOTAL_MEM=$(free -m | awk '/^Mem:/{print $2}')
                USED_MEM=$(free -m | awk '/^Mem:/{print $3}')
                FREE_MEM=$(free -m | awk '/^Mem:/{print $4}')
                THRESHOLD=20  # Set threshold for alert (in percentage)

                # Calculate memory usage percentage
                MEM_USAGE=$(( 100 * USED_MEM / TOTAL_MEM ))

                # Display memory usage
                echo "Total Memory: ${TOTAL_MEM} MB"
                echo "Used Memory: ${USED_MEM} MB"
                echo "Free Memory: ${FREE_MEM} MB"
                echo "Memory Usage: ${MEM_USAGE}%"

                # Check if memory usage exceeds the threshold
                if [ "$MEM_USAGE" -ge "$THRESHOLD" ]; then
                     echo "WARNING: Memory usage is above ${THRESHOLD}%!"
                fi
                '''
            }
        }
    }    
}  

pipeline {
    agent any
   
    stages{
        stage ('Bash script'){
            steps {
                sh '''
                #!/bin/bash

                # Set the CPU usage threshold (in percentage)
                THRESHOLD=80
                # Get the current CPU usage (ignoring the first line)
                CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8}')
                # Display CPU usage
                echo "Current CPU Usage: ${CPU_USAGE}%"
                # Check if CPU usage exceeds the threshold
                if (( $(echo "$CPU_USAGE > $THRESHOLD" | bc -l) )); then
                    echo "WARNING: CPU usage is above ${THRESHOLD}%!"
                fi
                '''
            }
        }
    }    
}  

pipeline {
    agent any 
    
    stages{
        stage('checkout') {
            steps {
              git 'https://github.com/devopsbyraham/jenkins-java-project.git'
            }
        }
    }
}

pipeline {
    agent any 
    
    stages{
        stage('checkout') {
            steps {
              git 'https://github.com/devopsbyraham/jenkins-java-project.git'
            }
        }
        stage('test') {
            steps {
                echo "my code is tested"
            }
        }
        stage('deploy') {
            input {
               message "Can We Continue ?"
               ok "Yes We Can Continue"
        }
            steps {
                echo "my code is deployed"
            }
        }
    }
}

Automated System Health Report Script

pipeline {
    agent any

    environment {
        REPORT_NAME = "system_health_report.txt"
    }

    stages {
        stage('Generate System Health Report') {
            steps {
                script {
                    sh '''
                    echo "=============================" > $REPORT_NAME
                    echo " System Health Report - $(date) " >> $REPORT_NAME
                    echo "=============================" >> $REPORT_NAME

                    echo -e "\\nðŸ”¸ CPU Load:" >> $REPORT_NAME
                    uptime | awk -F'load average:' '{ print "Load Average (1, 5, 15 min):" $2 }' >> $REPORT_NAME

                    echo -e "\\nðŸ”¸ Memory Usage:" >> $REPORT_NAME
                    free -h | awk 'NR==2{printf "Used: %s / Total: %s\\n", $3, $2}' >> $REPORT_NAME

                    echo -e "\\nðŸ”¸ Disk Usage (/ partition):" >> $REPORT_NAME
                    df -h / | awk 'NR==2{printf "Used: %s / Total: %s (%s)\\n", $3, $2, $5}' >> $REPORT_NAME

                    echo -e "\\nðŸ”¸ System Uptime:" >> $REPORT_NAME
                    uptime -p >> $REPORT_NAME

                    echo -e "\\nðŸ”¸ Currently Logged-in Users:" >> $REPORT_NAME
                    who | awk '{print $1}' | sort | uniq >> $REPORT_NAME

                    echo -e "\\nðŸ”¸ Top 5 CPU Consuming Processes:" >> $REPORT_NAME
                    ps -eo pid,comm,%cpu --sort=-%cpu | head -n 6 >> $REPORT_NAME

                    echo -e "\\nâœ… Report Complete.\\n" >> $REPORT_NAME
                    '''
                }
            }
        }

        stage('Archive Report') {
            steps {
                archiveArtifacts artifacts: "${REPORT_NAME}", fingerprint: true
            }
        }
    }

    post {
        always {
            echo "Pipeline completed. Report generated and archived."
        }
    }
}


tOMCAT SET UP BY USING MASTER AN SLAVE
 amazon-linux-extras install epel -y
    2  amazon-linux-extras install java-openjdk11 -y
    3  yum install jenkins -y
    4    sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
    5    sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
    6  yum install jenkins -y
    7  systemctl start jenkins.service
    8  systemctl status jenkins.service
    9  yum install git java-1.8.0-openjdk maven -y
   10  java -version
   11  update-alternatives --config java
   12  java -version
   13  update-alternatives --config java
   14  java -version
   15  update-alternatives --config java
   16  java -version
   17  update-alternatives --config java
   18  histroy
   19  history

slave: 

 1  amazon-linux-extras install java-openjdk11 -y
    2  hostname -i
    3  yum install git java-1.8.0-openjdk maven -y
    4  java -version
    5  wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.74/bin/apache-tomcat-9.0.74.tar.gz
    6  ll
    7  tar -zxvf apache-tomcat-9.0.74.tar.gz
    8  cd apache-tomcat-9.0.74/
    9  ll
   10  vim webapps/manager/META-INF/context.xml
   11  vim conf/tomcat-users.xml
   12  cd bin/
   13  ll
   14  ./startup.sh
   15  ./shutdown.sh
   16  ./startup.sh
   17  update-alternatives --config java
   18  java -version
   19  history

   master and slave setup in jenkins:-

   EXECUTE THGE BELOW COMMANDS ON ALL SERVERS:

1. amazon-linux-extras install java-openjdk11 -y
2. useradd jenkins
3. passwd jenkins
4. visudo 	: 100 th line
5. vim /etc/ssh/sshd_config   : 63 rd line  (no=yes)
6. systemctl restart sshd
7. systemctl status sshd
=====================================================
CONNECTING TO JENKINS SLAVES:

9. ssh-keygen
10. ssh-copy-id jenkins@172.31.63.151
11. ssh 'jenkins@172.31.63.151'
12. ctrl + d
13. ssh-copy-id jenkins@172.31.51.183
14. ssh 'jenkins@172.31.51.183'

=====================================================

